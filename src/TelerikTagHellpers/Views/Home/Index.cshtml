@{
	ViewData["Title"] = "Home Page";
}

<div class="row">
	<div class="col-xs-4 col-md-3 placeholder">
		<img class="img-responsive" alt="200x200" src="~/Images/200.png">
	</div>
	<div class="col-xs-12 col-md-9">
		<div class="row">
			<div class="col-xs-12 col-md-12">
				<h2>Lorem ipsum...</h2>
			</div>
		</div>
		<div class="row">
			<div class="col-xs-12 col-md-4">
				<p>
					Lorem Ipsum is simply dummy text of the printing and typesetting industry.
					Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a
					galley of type and scrambled it to make a type specimen book.
				</p>

				<p>
					@(Html.Kendo()
				.Button()
				.Name("PrimaryButton")
				.Content("Primary Button")
				.HtmlAttributes(new { @class = "textButton k-primary" }))
				</p>
			</div>

			<div class="col-xs-12 col-md-4">
				<p>
					Lorem Ipsum is simply dummy text of the printing and typesetting industry.
					Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a
					galley of type and scrambled it to make a type specimen book.
				</p>
				<p>
					@(Html.Kendo()
				.Button()
				.Name("TextButton")
				.Content("Button")
				.HtmlAttributes(new { @class = "textButton" }))
				</p>

			</div>
			<div class="col-xs-12 col-md-4">
				<p>
					Lorem Ipsum is simply dummy text of the printing and typesetting industry.
					Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a
					galley of type and scrambled it to make a type specimen book.
				</p>

				<p>
					@(Html.Kendo()
				.Button()
				.Name("Button")
				.Content("Button")
				.HtmlAttributes(new { @class = "textButton" }))
				</p>

			</div>
		</div>
	</div>

</div>

<div class="row">
	<div class="col-xs-18 col-md-12">
		@(Html.Kendo().Grid<TelerikTagHellpers.Models.OrderViewModel>()
				.Name("grid")
				.Columns(columns =>
				{
					columns.Bound(p => p.OrderID).Filterable(false);
					columns.Bound(p => p.Freight);
					columns.Bound(p => p.OrderDate).Format("{0:MM/dd/yyyy}");
					columns.Bound(p => p.ShipName);
					columns.Bound(p => p.ShipCity);
				})
				.Pageable()
				.Sortable()
				.Scrollable()
				.Filterable()
				.HtmlAttributes(new { style = "height:550px;" })
				.DataSource(dataSource => dataSource
					.Ajax()
					.PageSize(20)
					.Read(read => read.Action("Orders_Read", "Grid"))
				)
		)
	</div>
</div>
